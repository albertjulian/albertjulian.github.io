{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\src\\\\components\\\\university\\\\favoriteUniversity.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { getUniversityFunction } from './saga';\nimport { getTokenClient, getTokenAuth, getProfileUser } from '../index/token';\nimport SearchBar from '../subComponent/SearchBar';\nimport { TablePagination, Grid, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CardList from '../subComponent/CardList';\nimport TitleBar from '../subComponent/TitleBar';\n\nvar FavoriteUniversityList = /*#__PURE__*/function (_React$Component) {\n  _inherits(FavoriteUniversityList, _React$Component);\n\n  var _super = _createSuper(FavoriteUniversityList);\n\n  function FavoriteUniversityList() {\n    var _this;\n\n    _classCallCheck(this, FavoriteUniversityList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._isMounted = false;\n    _this.state = {\n      favoriteUniversityList: [],\n      allUniversityList: null,\n      searchRows: '',\n      page: 0,\n      rowsPerPage: 12\n    };\n    _this.getListUniversity = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (this.state.favoriteUniversityList) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return getUniversityFunction({});\n\n            case 3:\n              data = _context.sent;\n\n              if (data) {\n                if (!data.error) {\n                  this.setState({\n                    allUniversityList: data.data\n                  });\n                } else {\n                  this._isMounted && this.setState({\n                    errorMessage: data.error\n                  });\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.getDataFavoriteFromLocalStorage = function () {\n      var dataUser = JSON.parse(getProfileUser());\n\n      if (dataUser.favorites) {\n        _this.setState({\n          favoriteUniversityList: dataUser.favorites\n        });\n      }\n    };\n\n    _this.handleChangeSearch = function (e) {\n      _this.setState({\n        searchRows: e.target.value\n      });\n    };\n\n    _this.handleChangePage = function (event, newPage) {\n      _this.setState({\n        page: newPage\n      });\n    };\n\n    _this.searchUniversityName = function (listUniversity, search) {\n      var newList = listUniversity && listUniversity.filter(function (university) {\n        return university.name.toLowerCase().includes(search.toLowerCase());\n      });\n      return newList || [];\n    };\n\n    return _this;\n  }\n\n  _createClass(FavoriteUniversityList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n      this._isMounted && this.getListUniversity();\n      this._isMounted && this.getDataFavoriteFromJSON();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    } //Ambil data\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (getTokenClient() && getTokenAuth()) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            padding: 0\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(TitleBar, {\n          title: \"Favorite University - List\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(SearchBar, {\n          id: \"search\",\n          value: this.state.searchRows,\n          placeholder: 'Search University Name',\n          onChange: this.handleChangeSearch,\n          float: 'right',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(AutoComplete, {\n          multiple: true,\n          id: \"tags-outlined\",\n          options: this.state.allUniversityList,\n          getOptionLabel: function getOptionLabel(option) {\n            return option.name;\n          },\n          value: this.state.favoriteUniversityList,\n          filterSelectedOptions: true,\n          renderInput: function renderInput(params) {\n            return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n              variant: \"outlined\",\n              label: \"filterSelectedOptions\",\n              placeholder: \"Favorites\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 25\n              }\n            }));\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(Grid, {\n          container: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }\n        }, this.state.favoriteUniversityList && this.searchUniversityName(this.state.favoriteUniversityList, this.state.searchRows).slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map(function (university, index) {\n          return /*#__PURE__*/React.createElement(Grid, {\n            item: true,\n            xs: 12,\n            sm: 4,\n            lg: 4,\n            key: index,\n            style: {\n              padding: 10\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(CardList, {\n            data: university,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 25\n            }\n          }));\n        })), /*#__PURE__*/React.createElement(TablePagination, {\n          component: \"div\",\n          count: this.searchUniversityName(this.state.favoriteUniversityList, this.state.searchRows).length,\n          rowsPerPage: this.state.rowsPerPage,\n          page: this.state.page,\n          onChangePage: this.handleChangePage,\n          rowsPerPageOptions: [],\n          labelDisplayedRows: function labelDisplayedRows(_ref2) {\n            var from = _ref2.from,\n                to = _ref2.to,\n                count = _ref2.count;\n            return \"Rows: \".concat(from, \"-\").concat(to, \" of \").concat(count !== -1 ? count : \"more than \".concat(to));\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }\n        }));\n      } else if (getTokenAuth()) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/login\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }\n        });\n      }\n    }\n  }]);\n\n  return FavoriteUniversityList;\n}(React.Component);\n\nexport default FavoriteUniversityList;","map":{"version":3,"sources":["C:/Users/user/Desktop/albertjulian.github.io/src/components/university/favoriteUniversity.js"],"names":["React","Redirect","getUniversityFunction","getTokenClient","getTokenAuth","getProfileUser","SearchBar","TablePagination","Grid","TextField","Autocomplete","CardList","TitleBar","FavoriteUniversityList","_isMounted","state","favoriteUniversityList","allUniversityList","searchRows","page","rowsPerPage","getListUniversity","data","error","setState","errorMessage","getDataFavoriteFromLocalStorage","dataUser","JSON","parse","favorites","handleChangeSearch","e","target","value","handleChangePage","event","newPage","searchUniversityName","listUniversity","search","newList","filter","university","name","toLowerCase","includes","getDataFavoriteFromJSON","padding","option","params","slice","map","index","length","from","to","count","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\nimport {getUniversityFunction} from './saga'\r\nimport { getTokenClient,getTokenAuth, getProfileUser } from '../index/token'\r\nimport SearchBar from '../subComponent/SearchBar';\r\nimport { TablePagination, Grid, TextField } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CardList from '../subComponent/CardList';\r\nimport TitleBar from '../subComponent/TitleBar';\r\n\r\nclass FavoriteUniversityList extends React.Component {\r\n    _isMounted = false\r\n\r\n    state = {\r\n        favoriteUniversityList: [],\r\n        allUniversityList: null,\r\n        searchRows:'',\r\n        page: 0,\r\n        rowsPerPage: 12,\r\n    };\r\n\r\n    componentDidMount(){\r\n        this._isMounted=true\r\n        this._isMounted && this.getListUniversity()\r\n        this._isMounted && this.getDataFavoriteFromJSON();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted=false\r\n    }\r\n  \r\n    //Ambil data\r\n    getListUniversity = async function(){\r\n        if(!this.state.favoriteUniversityList) {\r\n            const data = await getUniversityFunction({});\r\n\r\n            if(data){\r\n                if(!data.error){\r\n                    this.setState( { allUniversityList: data.data })\r\n                }else{\r\n                    this._isMounted && this.setState({errorMessage:data.error})\r\n                }\r\n            }     \r\n        }\r\n    }\r\n\r\n    getDataFavoriteFromLocalStorage = () => {\r\n        const dataUser = JSON.parse(getProfileUser());\r\n\r\n        if(dataUser.favorites) {\r\n            this.setState( { favoriteUniversityList: dataUser.favorites} )\r\n        }\r\n    }\r\n\r\n    handleChangeSearch = (e)=>{\r\n        this.setState({searchRows: e.target.value});\r\n    }\r\n    \r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({page: newPage});\r\n    };\r\n\r\n    searchUniversityName = (listUniversity, search) => {\r\n        const newList = listUniversity && listUniversity.filter(function (university) {\r\n        return university.name.toLowerCase().includes(search.toLowerCase())\r\n        });\r\n    \r\n        return newList || [];\r\n    }\r\n  \r\n    render() {\r\n        if(getTokenClient() && getTokenAuth()){\r\n            return (\r\n                <div style={{padding:0}}>\r\n                <TitleBar \r\n                    title=\"Favorite University - List\"\r\n                />\r\n\r\n                <SearchBar\r\n                    id=\"search\"\r\n                    value={this.state.searchRows}\r\n                    placeholder={'Search University Name'}\r\n                    onChange={this.handleChangeSearch} \r\n                    float={'right'}\r\n                />\r\n\r\n                <AutoComplete\r\n                    multiple\r\n                    id=\"tags-outlined\"\r\n                    options={this.state.allUniversityList}\r\n                    getOptionLabel={(option) => option.name}\r\n                    value={this.state.favoriteUniversityList}\r\n                    filterSelectedOptions\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"outlined\"\r\n                            label=\"filterSelectedOptions\"\r\n                            placeholder=\"Favorites\"\r\n                        />\r\n                    )}\r\n                />\r\n\r\n                <Grid container>\r\n                    {\r\n                    this.state.favoriteUniversityList &&\r\n                    this.searchUniversityName(this.state.favoriteUniversityList, this.state.searchRows)\r\n                    .slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage)\r\n                    .map((university, index) => \r\n                        <Grid item xs={12} sm={4} lg={4} key={index} style={{ padding: 10 }}>\r\n                        <CardList\r\n                            data={university}\r\n                        />\r\n                        </Grid>\r\n                    )\r\n                    }\r\n                </Grid>\r\n\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    count={this.searchUniversityName(this.state.favoriteUniversityList, this.state.searchRows).length}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    page={this.state.page}\r\n                    onChangePage={this.handleChangePage}\r\n                    rowsPerPageOptions={[]}\r\n                    labelDisplayedRows={\r\n                    ({ from, to, count }) => `Rows: ${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`\r\n                    }\r\n                />\r\n                \r\n                </div>\r\n            );\r\n        }\r\n        else if(getTokenAuth()){\r\n            return  <Redirect to='/login' />\r\n        }\r\n    }\r\n}\r\n\r\nexport default (FavoriteUniversityList) ;"]},"metadata":{},"sourceType":"module"}