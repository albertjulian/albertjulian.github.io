{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\user\\\\Desktop\\\\albertjulian.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport md5 from 'md5';\nimport { setProfileUser } from './token';\nimport { setTokenClient } from './token';\nvar userList = [{\n  username: 'admin',\n  password: 'fe72d42f72eb2aeeeb50287347bcf66e'\n}];\nexport function postLoginFunction(_x) {\n  return _postLoginFunction.apply(this, arguments);\n}\n\nfunction _postLoginFunction() {\n  _postLoginFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(param) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve) {\n                var flag, i, error;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        flag = false;\n                        i = 0;\n\n                      case 3:\n                        if (!(i < userList.length)) {\n                          _context.next = 10;\n                          break;\n                        }\n\n                        if (!(param.username === userList[i].username && md5(param.password) === userList[i].password)) {\n                          _context.next = 7;\n                          break;\n                        }\n\n                        flag = true;\n                        return _context.abrupt(\"break\", 10);\n\n                      case 7:\n                        i += 1;\n                        _context.next = 3;\n                        break;\n\n                      case 10:\n                        if (flag) {\n                          setProfileUser(JSON.stringify(param));\n                          setTokenClient('xVuniversityVx', new Date().getTime() + 7 * 24 * 3600 * 1000);\n                        } else {\n                          param.error = 'Username dan Password tidak sesuai';\n                        }\n\n                        resolve(param);\n                        _context.next = 19;\n                        break;\n\n                      case 14:\n                        _context.prev = 14;\n                        _context.t0 = _context[\"catch\"](0);\n                        error = _context.t0.message && \"Error : \".concat(_context.t0.message.toString().toUpperCase());\n                        param.error = error;\n                        resolve(param);\n\n                      case 19:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 14]]);\n              }));\n\n              return function (_x2) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _postLoginFunction.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/albertjulian.github.io/src/components/index/saga.js"],"names":["md5","setProfileUser","setTokenClient","userList","username","password","postLoginFunction","param","Promise","resolve","flag","i","length","JSON","stringify","Date","getTime","error","message","toString","toUpperCase"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SAASC,cAAT,QAA+B,SAA/B;AAEA,IAAMC,QAAQ,GAAG,CACb;AACIC,EAAAA,QAAQ,EAAE,OADd;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CADa,CAAjB;AAOA,gBAAsBC,iBAAtB;AAAA;AAAA;;;gFAAO,kBAAkCC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACI,IAAIC,OAAJ;AAAA,kFAAY,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,wBAAAA,IAFO,GAEA,KAFA;AAIFC,wBAAAA,CAJE,GAIE,CAJF;;AAAA;AAAA,8BAIKA,CAAC,GAAGR,QAAQ,CAACS,MAJlB;AAAA;AAAA;AAAA;;AAAA,8BAMHL,KAAK,CAACH,QAAN,KAAmBD,QAAQ,CAACQ,CAAD,CAAR,CAAYP,QAA/B,IACAJ,GAAG,CAACO,KAAK,CAACF,QAAP,CAAH,KAAwBF,QAAQ,CAACQ,CAAD,CAAR,CAAYN,QAPjC;AAAA;AAAA;AAAA;;AASHK,wBAAAA,IAAI,GAAG,IAAP;AATG;;AAAA;AAI0BC,wBAAAA,CAAC,IAAI,CAJ/B;AAAA;AAAA;;AAAA;AAcX,4BAAID,IAAJ,EAAU;AACNT,0BAAAA,cAAc,CAACY,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAD,CAAd;AACAL,0BAAAA,cAAc,CAAC,gBAAD,EAAmB,IAAIa,IAAJ,GAAWC,OAAX,KAAwB,IAAI,EAAJ,GAAS,IAAT,GAAe,IAA1D,CAAd;AACH,yBAHD,MAGO;AACHT,0BAAAA,KAAK,CAACU,KAAN,GAAc,oCAAd;AACH;;AAGDR,wBAAAA,OAAO,CAACF,KAAD,CAAP;AAtBW;AAAA;;AAAA;AAAA;AAAA;AAwBLU,wBAAAA,KAxBK,GAwBG,YAAIC,OAAJ,sBAA0B,YAAIA,OAAJ,CAAYC,QAAZ,GAAuBC,WAAvB,EAA1B,CAxBH;AAyBXb,wBAAAA,KAAK,CAACU,KAAN,GAAcA,KAAd;AACAR,wBAAAA,OAAO,CAACF,KAAD,CAAP;;AA1BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import md5 from 'md5';\nimport { setProfileUser } from './token'\nimport { setTokenClient } from './token';\n\nconst userList = [\n    {\n        username: 'admin',\n        password: 'fe72d42f72eb2aeeeb50287347bcf66e',\n    }\n]\n\nexport async function postLoginFunction (param) {\n    return new Promise(async (resolve)=>{\n        try {\n            let flag = false;\n\n            for (let i = 0; i < userList.length; i += 1) {\n                if (\n                    param.username === userList[i].username &&\n                    md5(param.password) === userList[i].password\n                ) {\n                    flag = true;\n                    break;\n                }\n            }\n\n            if (flag) {\n                setProfileUser(JSON.stringify(param))\n                setTokenClient('xVuniversityVx', new Date().getTime() + (7 * 24 * 3600 *1000))\n            } else {\n                param.error = 'Username dan Password tidak sesuai'\n            }\n            \n\n            resolve(param)\n        } catch (err){\n            const error = err.message && `Error : ${err.message.toString().toUpperCase()}`\n            param.error = error;\n            resolve(param);\n        }\n    })\n    \n}\n\n\n"]},"metadata":{},"sourceType":"module"}